# HEURISTIC GLOBAL OPTIMISATION

de:                  # Differential Evolution (DE)
  class: pg.de
  params:
    gen: 10000       # number of generations
    F: .8            # weight coefficient (default value is 0.8)
    CR: .9           # crossover probability (default value is 0.9)
    variant: 2       # mutation variant (default variant is 2: /rand/1/exp)
    ftol: 1e-06      # stopping criteria on the f tolerance (default is 1e-6)
    tol: 1e-06       # stopping criteria on the x tolerance (default is 1e-6)
  log:
    - gen
    - feval
    - best
    - dx
    - df
sade:                # Self-adaptive DE (jDE amd iDE)
  class: pg.sade
  params:
    gen: 10000       # number of generations
    variant: 2       # mutation variant (dafault variant is 2: /rand/1/exp)
    variant_adptv: 1 # F and CR parameter adaptation scheme to be used (one of 1..2)
    ftol: 1e-6       # stopping criteria on the f tolerance (default is 1e-6)
    xtol: 1e-6       # stopping criteria on the x tolerance (default is 1e-6)
    memory: False    # when true the adapted parameters CR anf F are not reset between successive calls to the evolve method
  log:
    - gen
    - feval
    - best
    - F
    - CR
    - dx
    - df
de1220:              # Self-adaptive DE (de_1220 aka pDE)
  class: pg.de1220
  params:
    gen: 10000       # number of generations
    allowed_variants:  # allowed mutation variants, each one being a number in [1, 18]
      - 2
      - 3
      - 7
      - 10
      - 13
      - 14
      - 15
      - 16
    variant_adptv: 1 # F and CR parameter adaptation scheme to be used (one of 1..2)
    ftol: 1e-6       # stopping criteria on the f tolerance (default is 1e-6)
    xtol: 1e-6       # stopping criteria on the x tolerance (default is 1e-6)
    memory: False    # when true the adapted parameters CR anf F are not reset between successive calls to the evolve method
  log:
    - gen
    - feval
    - best
    - F
    - CR
    - variant
    - dx
    - df
sea:                 # (N+1)-ES Simple Evolutionary Algorithm
  class: pg.sea
  params:
    gen: 10000         # number of generations to consider (each generation will compute the objective function once)
  log:
    - gen
    - feval
    - best
    - improvement
    - mutations
sga:                 # Simple Genetic Algorithm
  class: pg.sga
  params:
    gen: 10000         # number of generations
    cr: .90            # crossover probability
    eta_c: 1.          # distribution index for sbx crossover. This parameter is inactive if other types of crossover are selected
    m: 0.02            # mutation probability
    param_m: 1.        # distribution index (polynomial mutation), gaussian width (gaussian mutation) or inactive (uniform mutation)
    param_s: 2         # the number of best individuals to use in "truncated" selection or the size of the tournament in tournament selection.
    crossover: exponential  # the crossover strategy. One of exponential, binomial, single or sbx
    mutation: polynomial    # the mutation strategy. One of gaussian, polynomial or uniform
    selection: tournament   # the selection strategy. One of tournament, truncated
  log:
    - gen
    - feval
    - best
    - improvement
sa:                  # Coranas's Simulated Annealing (SA)
  class: pg.simulated_annealing
  params:
    Ts: .01            # starting temperature
    Tf: 1e-05          # final temperature
    n_T_adj: 10        # number of temperature adjustments in the annealing schedule
    n_range_adj: 10    # number of adjustments of the search range performed at a constant temperature
    bin_size: 10       # number of mutations that are used to compute the acceptance rate
    start_range: .5    # starting range for mutating the decision vector
  log:
    - fevals
    - best
    - current
    - mean range
    - temperature
pso:                 # Particle Swarm Optimisation
  class: pg.pso
  params:
    gen: 10000       # number of generations
    omega: 0.7298    # inertia weight (or constriction factor)
    eta1: 2.05       # social component
    eta2: 2.05       # cognitive component
    max_vel: 0.5     # maximum allowed particle velocities (normalized with respect to the bounds width)
    variant: 5       # algoritmic variant
    neighb_type: 2   # swarm topology (defining each particle's neighbours)
    neighb_param: 4  # topology parameter (defines how many neighbours to consider)
    memory: False    # when true the velocities are not reset between successive calls to the evolve method
  log:
    - gen
    - feval
    - gbest
    - mean vel.
    - mean lbest
    - avg. dist.
abc:                 # Artificial Bee Colony (ABC)
  class: pg.bee_colony
  params:
    gen: 10000       # number of generations
    limit: 10        # maximum number of trials for abandoning a source
  log:
    - gen
    - feval
    - best
    - current best
cmaes:               # Covariance Matrix Adaptation Evolutionary Strategy (CMA_ES)
  class: pg.cmaes
  params:
    gen: 10000       # number of generations
    cc: -1           # backward time horizon for the evolution path (by default is automatically assigned)
    cs: -1           # makes partly up for the small variance loss in case the indicator is zero (by default is automatically assigned)
    c1: -1           # learning rate for the rank-one update of the covariance matrix (by default is automatically assigned)
    cmu: -1          # learning rate for the rank-mu update of the covariance matrix (by default is automatically assigned)
    sigma0: 0.5      # initial step size
    ftol: 1e-06      # stopping criteria on the f tolerance
    xtol: 1e-06      # stopping criteria on the x tolerance
    memory: False    # when true the adapted parameters are not reset between successive calls to the evolve method
#    force_bounds: False  # when true the box bounds are enforced. The fitness will never be called outside the bounds but the covariance matrix adaptation mechanism will worsen
  log:
    - gen
    - feval
    - best
    - dx
    - df
    - sigma
nsga2:               # Non-dominated Sorting GA (NSGA2)
  class: pg.nsga2
  params:
    gen: 10000       # number of generations
    cr: 0.95         # crossover probability
    eta_c: 10        # distribution index for crossover
    m: 0.01          # mutation probability
    eta_m: 10        # distribution index for mutation
moead:               # Multi-objective EA with Decomposition (MOEA/D)
  class: pg.moaed
  params:
    gen: 10000       # number of generations
    weight_generation: grid  # method used to generate the weights, one of grid, low discrepancy or random
    decomposition: tchebycheff  # method used to decompose the objectives, one of tchebycheff, weighted or bi
    neighbours: 20   # size of the weight's neighborhood
    CR: 1            # crossover parameter in the Differential Evolution operator
    F: 0.5           # parameter for the Differential Evolution operator
    eta_m: 20        # distribution index used by the polynomial mutation
    realb: 0.9       # chance that the neighbourhood is considered at each generation, rather than the whole population (only if preserve_diversity is True)
    limit: 2         # maximum number of copies reinserted in the population (only if m_preserve_diversity is true)
    preserve_diversity: True  # when true activates diversity preservation mechanisms

# META_ALGORITHMS

mbh:                 # Monotonic Basin Hopping (MBH)
  class: pg.mbh
  params:
    algo: pg.compass_search()  # an algorithm or a user-defined algorithm
    stop: 5          # consecutive runs of the inner algorithm that need to result in no improvement for mbh to stop
    perturb: 1e-02   # perturb the perturbation to be applied to each component
cstrs:               # Cstrs Self-Adaptive
  class: pg.cstrs_self_adaptive
auglag:              # Augmented Lagrangian Algorithm
  class: pg.nlopt
  params:
    - auglag
auglag_eq:           # Augmented Lagrangian Algorithm
  class: pg.nlopt
  params:
    - auglag_eq

# LOCAL OPTIMISATION

compass_search:      # Compass Search
  class: pg.nlopt
  params:
    max_fevals: 1    # maximum number of function evaluation
    start_range: .1  # start range (dafault value is .1)
    stop_range: .01  # stop range (dafault value is .01)
    reduction_coeff: .5  # range reduction coefficient (dafault value is .5)
cobyla:
  class: pg.nlopt
  params:
    - cobyla
bobyqa:
  class: pg.nlopt
  params:
    - bobyqa
newuoa:
  class: pg.nlopt
  params:
    - newuoa
newuoa_bound:
  class: pg.nlopt
  params:
    - newuoa_bound
praxis:
  class: pg.nlopt
  params:
    - praxis
neldermead:
  class: pg.nlopt
  params:
    - neldermead
sbplx:
  class: pg.nlopt
  params:
    - sbplx
mma:
  class: pg.nlopt
  params:
    - mma
ccsaq:
  class: pg.nlopt
  params:
    - ccsaq
slsqp:
  class: pg.nlopt
  params:
    - slsqp
lbfgs:
  class: pg.nlopt
  params:
    - lbfgs
tnewton_precond_restart:
  class: pg.nlopt
  params:
    - tnewton_precond_restart
tnewton_precond:
  class: pg.nlopt
  params:
    - tnewton_precond
tnewton_restart:
  class: pg.nlopt
  params:
    - tnewton_restart
tnewton:
  class: pg.nlopt
  params:
    - tnewton
var2:
  class: pg.nlopt
  params:
    - var2
var1:
  class: pg.nlopt
  params:
    - var1
